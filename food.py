import telebot
from telebot import types
import json

TOKEN = '7688187740:AAFKAO8TWJVpF_rr678izTriiXW0BQzauPI'

bot = telebot.TeleBot(TOKEN)

ITEMS_PER_PEGA = 4


@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã –≥–æ—Ç–æ–≤!', reply_markup=button_menu())


user_info = {}


def button_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("–ú–µ–Ω—éüçú")
    btn2 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞üß∫")
    btn3 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ")
    markup.add(btn1, btn2, btn3)

    return markup


@bot.message_handler(commands=['add_info'])
def add_info(message):
    chat_id = message.chat.id
    user_info[chat_id] = {}
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(msg, process_name_step)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
def process_name_step(message):
    chat_id = message.chat.id
    user_info[chat_id]['name'] = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(msg, process_phone_step)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def process_phone_step(message):
    chat_id = message.chat.id
    user_info[chat_id]['phone'] = message.text
    bot.send_message(chat_id,
                     f"–í–∞—à–µ –∏–º—è: {user_info[chat_id]['name']}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info[chat_id]['phone']}")
    add_clients(user_info[chat_id]['name'], user_info[chat_id]['phone'])


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.text == "–ú–µ–Ω—éüçú":
        bot.send_message(message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–µ–Ω—éüçú', reply_markup=generate_markup())
    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞üß∫":
        items_in_cart = get_cart(message.chat.id)

        markup = types.InlineKeyboardMarkup()
        for item in items_in_cart:
            minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item}")
            name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
            plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item}")
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É markup
            markup.add(minus_button, name_button, plus_button)

        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞:", reply_markup=markup)
    elif message.text == "–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ":
        items = get_cart(message.chat.id)
        message_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for item in items:
            message_text += "‚ú® " +  str(item[0]) + " x" + str(item[1]) + "\n"

        bot.send_message(message.chat.id, message_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn2 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        btn3 = types.KeyboardButton("–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ")
        markup.add(btn2, btn3)

        bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.", reply_markup=markup)
    if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
            bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.', reply_markup=button_menu())
    elif message.text == "–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–µ–æ–º–µ—Ç–∫–æ–π Telegram.")
        bot.register_next_step_handler_by_chat_id(message.chat.id, callback=create_order)

def create_order(message):
    if message.content_type == 'text':
        address = message.text
    elif message.content_type == 'location':
        address = f'{message.location.latitude}, {message.location.longitude}'
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞")
        return

    cost = calculate_cart_total(message.chat.id)

    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å: {address}")
    bot.send_message(message.chat.id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {cost}")
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É")
    bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—ÉüöÄ", reply_markup=button_menu())


def calculate_cart_total(client_id):
    total_price = 0

    with open("menu.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            cart = client.get("cart", [])
            for cart_item in cart:
                item_name = cart_item[0]

                for menu_item in menu_items:
                    if menu_item["name"] == item_name:
                        item_price = int(menu_item["price"].split()[0])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ, —É–±—Ä–∞–≤ "—Ä—É–±."
                        item_quantity = cart_item[1]
                        total_price += item_price * item_quantity

    return total_price



def add_clients(name, phone):
    try:
        with open('menu.json', 'r', encoding='utf-8') as file:
            food = json.load(file)
    except FileNotFoundError:
        food = {"clients": []}

    food["clients"].append({
        "name": name,
        "phone": phone
    })

    with open('menu.json', 'w', encoding='utf-8') as file:
        json.dump(food, file, ensure_ascii=False)


menu_items = [
    {"name": "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø", "price": "450 —Ä—É–±.", "photo": "mushroom_soup.png"},
    {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": "550 —Ä—É–±.", "photo": "caesar.png"},
    {"name": "–£—Ç–∫–∞ —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "price": "700 —Ä—É–±.", "photo": "duck_orange.png"},
    {"name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "price": "650 —Ä—É–±.", "photo": "stroganoff.png"},
    {"name": "–†–∏–∑–æ—Ç—Ç–æ", "price": "500 —Ä—É–±.", "photo": "risotto.png"},
    {"name": "–¢–∏—Ä–∞–º–∏—Å—É", "price": "400 —Ä—É–±.", "photo": "tiramisu.png"},
    {"name": "–ë–ª–∏–Ω—ã", "price": "300 —Ä—É–±.", "photo": "pancakes.png"},
    {"name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "price": "550 —Ä—É–±.", "photo": "carbonara.png"},
    {"name": "–ì–∞—Å–ø–∞—á–æ", "price": "350 —Ä—É–±.", "photo": "gazpacho.png"},
    {"name": "–§–∞–ª–∞—Ñ–µ–ª—å", "price": "400 —Ä—É–±.", "photo": "falafel.png"}]


def generate_markup(page=0):
    markup = types.InlineKeyboardMarkup()
    start_index = page * ITEMS_PER_PEGA
    end_index = start_index + ITEMS_PER_PEGA

    for items in menu_items[start_index: end_index]:
        button = types.InlineKeyboardButton(f"{items["name"]} , {items["price"]}",
                                            callback_data=f'item_{menu_items.index(items)}')
        markup.add(button)

    if page > 0:
        markup.add(types.InlineKeyboardButton(text='<<', callback_data=f'page_{page - 1}'))

    if end_index < len(menu_items):
        markup.add(types.InlineKeyboardButton(text='>>', callback_data=f'page_{page + 1}'))

    return markup


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(call.id)
    if call.data.startswith('page_'):
        _, page = call.data.split('_')
        markup = generate_markup(int(page))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=markup)
    elif call.data.startswith('item_'):
        _, item_index = call.data.split('_')
        add_to_cart(call.message.chat.id, menu_items[int(item_index)])
        bot.send_message(call.message.chat.id, f'{menu_items[int(item_index)]["name"]} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑')


def add_to_cart(client_id, item):
    with open("menu.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            for cart_item in client["id"]:
                if cart_item[0] == item:
                    cart_item[1] += 1
            else:
                client["cart"].append([item, 1])

    with open("menu.json", 'w', encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False)


def delete_to_cart(client_id, item):
    with open("menu.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if str(client.get("id")) == str(client_id):
            for cart_item in client["id"]:
                if cart_item[0] == item:
                    cart_item[1] -= 1
                    if cart_item[1] == 0:
                        del cart_item[1]
            else:
                client["cart"].pop([item, 1])

    with open("menu.json", 'w', encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False)



def get_cart(client_id):
    with open("menu.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            return client.get("cart", [])

    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω


bot.polling()
